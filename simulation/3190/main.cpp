#include <iostream>
using namespace std;

// 시간에 따른 회전 방향 배열
char t[10002];
// 시간에 따른 뱀의 위치 배열과 보드 배열
int tx[10002], ty[10002], brd[101][101];
// 회전에 따른 방향 배열 정의
int d[4][2] = { {0,1}, {1, 0}, {0, -1}, {-1, 0} };
int n, k, l, x, y;
char c;

int main() {
	cin.tie(0);
	ios::sync_with_stdio(false);

	cin >> n >> k;
	// 사과 개수만큼 사과의 위치를 입력받아 그 위치에 1(사과)을 입력
	while (k--) {
		cin >> x >> y;
		brd[x][y] = 1;
	}
	cin >> l;
	// 방향 회전 수만큼 회전을 시작하기 이전 시간과 방향을 입력
	while (l--) {
		cin >> x >> c;
		// 입력할 땐 회전할 때로 입력함
		t[x+1] = c;
	}

	// 게임을 시작하기 전 뱀의 위치와 시간을 측정할 변수 정의
	int prx = 1, pry = 0, cnt = 1;
	// 변수 재사용을 위한 초기화
	l = k = 0;
	for (;; ++cnt) {
		// 시간이 지날 때마다 뱀의 머리가 이동한 위치를 갱신
		prx += d[l][0], pry += d[l][1];
		// 뱀의 머리가 이동한 위치가 벽이거나 자기 몸일 경우, 게임 종료
		if (prx < 1 || pry < 1 || prx > n || pry > n || brd[prx][pry] < 0) break;
		// 뱀의 머리가 이동한 위치에 사과가 없을 경우
		if (!brd[prx][pry]) {
			// 뱀의 꼬리가 위치한 곳(길이가 1일 경우 머리와 같이 존재)을 이동할 수 있는 위치로 변경
			brd[tx[k]][ty[k]] = 0;
			// 뱀의 꼬리가 이동했으므로 뱀의 꼬리가 위치한 좌표 값을 갱신
			++k;
		}

		// 시간에 따른 뱀의 머리 위치를 입력해 줌.
		tx[cnt] = prx;
		ty[cnt] = pry;
		// 뱀의 머리가 위치한 부분은 몸통 표시를 해줌.
		brd[prx][pry] = -1;
		// 시간에 따른 회전 방향이 L(왼쪽)일 경우, 이동 방향을 반시계 방향으로 90도 이동
		if (t[cnt] == 'L') l = l + 3 & 3;
		// 시간에 따른 회전 방향이 D(오른쪽)일 경우, 이동 방향을 시계 방향으로 90도 이동
		else if (t[cnt] == 'D') l = l + 1 & 3;
	}
	// 벽이나 몸통에 부딛치기 이전의 시간을 출력;
	cout << cnt-1;
	return 0;
}