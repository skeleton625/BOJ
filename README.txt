백준 알고리즘 6549 문제 풀이 중입니다.

문제 풀이를 완료했습니다.

해당 문제는 스택을 사용해서 풀이하는 것이 더 효율적입니다.

먼저 입력된 배열의 원소 번호를 스택에 계속해서 넣어줍니다.

넣어주는 과정에서 스택에 인자가 존재하고 스택 꼭대기 원소 번호의 배열 값이 현재 i(반복문) 번째 배열 값보다 클 경우 

다음과 같은 순서를 따릅니다.

1. 스택 꼭대기 원소 번호의 배열 값을 임시 저장, 후에 스택을 pop 해줌.

2. 스택 내에 인자가 존재할 경우, 가로 길이는 현재 i(반복문) - 스택 꼭대기 원소 번호 - 1이 됩니다.

	- 반복문의 i는 직사각형 블럭들을 순서대로 탐색하고 있는 중입니다.

	- 이 상황으로 보았을 때 현재 i의 값은 지나온 가로 길이 값이 됩니다.

	- 즉, i - 스택 꼭대기 원소 번호 - 1 값은 현재 높이에 해당하는 사각형 최대 크기를 구할 수 

	있는 가로 크기가 됩니다.

3. 스택 내에 인자가 존재하지 않을 경우, 가로 길이는 직사각형 개수가 됩니다.

	(직사각형 하나 가로 길이는 1 입니다.)

4. 이렇게 구한 가로, 세로(임시 저장한 높이)로 구한 넓이가 기존 넓이보다 크면 해당 넓이를 저장해 줍니다.

5. 위의 1~4번을 반복해줍니다. (조건이 맞을 경우에만)

	예시) 
		0 1 2 3 4 - 배열의 칸 번호
		
		1 2 3 4 1 - 배열 값(높이)
		
		i = 4 일 때 스택에 저장된 값 -> 0, 1, 2, 3
	
		위의 반복문을 시작해 나오는 가로의 값

		1. i - 2(스택에서 3이 빠졌기 때문에 그 다음 꼭대기 값을 가져옴) - 1 = 1

		2. i - 1 - 1 = 2
		
		3. i - 0 - 1 = 3

위의 경우가 끝난 뒤에도 스택에 값이 남아있을 수 있으므로 남아있는 값에 대해서 위의 반복문을 실행해주면 됩니다.

단 이때는 모든 직사각형을 탐색했기 때문에 가로의 길이는 기본적으로 배열 크기가 됩니다.

이렇게 해서 주어진 높이에서 직사각형 넓이가 최대가 되는 값을 구할 수 있습니다.
